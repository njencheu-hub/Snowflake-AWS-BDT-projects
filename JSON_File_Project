/*
Unstructured Data - Simple JSON + Internal Stage + Copy Command 
Project Overview
In this mini project, you will:
Load customer data from a JSON file into a raw table in Snowflake using the internal stage.
Perform JSON flattening on the raw table and create a flatten table 
Perform data analysis on the flatten data

Objectives
Learn how to work with Snowflake's internal stages for file storage.
Use the COPY INTO command to load unstructured data into the Snowflake table.
Perform simple JSON Flattening in snowflake.
Set up raw and flatten tables in Snowflake for analytics purposes.

Tools/Technologies Used
Snowflake: Cloud-based data warehouse
Snowflake Web UI: SQL execution environment
JSON File: Sample Customer data
*/

USE ROLE ACCOUNTADMIN;

USE WAREHOUSE COMPUTE_WH;

/*
Create a Database & Schema
Database : CUSTOMER_DATA
Schema : RAW_DATA
Schema : FLATTEN_DATA
*/

CREATE OR REPLACE DATABASE CUSTOMER_DATA;

CREATE OR REPLACE SCHEMA RAW_DATA;

CREATE OR REPLACE SCHEMA FLATTEN_DATA;

/*
Create Raw Table in the RAW_DATA schema

Table : 
Database: CUSTOMER_DATA
Schema: RAW_DATA
Name: CUSTOMER_RAW 
Table structure
JSON_DATA VARIANT
*/

USE SCHEMA RAW_DATA;

CREATE OR REPLACE TABLE CUSTOMER_RAW
(
json_data VARIANT
);

/*
Create flatten table in the FLATTEN_DATA schema

Table Name : 
Database: CUSTOMER_DATA
Schema: FLATTEN_DATA
Name: CUSTOMER_FLATTEN 

Table structure
CUSTOMERID INT
NAME STRING
EMAIL STRING
REGION STRING
COUNTRY STRING
PRODUCTNAME STRING
PRODUCTBRAND STRING
CATEGORY STRING
QUANTITY INT
PRICEPERUNIT FLOAT
TOTALSALES FLOAT
PURCHASEMODE STRING
MODEOFPAYMENT STRING
PURCHASEDATE DATE
*/

USE SCHEMA FLATTEN_DATA;

CREATE OR REPLACE TABLE CUSTOMER_FLATTEN
(
CUSTOMERID INT,
NAME STRING,
EMAIL STRING,
REGION STRING,
COUNTRY STRING,
PRODUCTNAME STRING,
PRODUCTBRAND STRING,
CATEGORY STRING,
QUANTITY INT,
PRICEPERUNIT FLOAT,
TOTALSALES FLOAT,
PURCHASEMODE STRING,
MODEOFPAYMENT STRING,
PURCHASEDATE DATE
);

/*
Upload the JSON File to an Internal Stage
Create an Internal Stage in the RAW_DATA schema
Database: CUSTOMER_DATA
Schema: RAW_DATA
Name: CUSTOMER_STAGE
Upload the customer json data file in the internal stage
List the file in the internal stage
*/
USE SCHEMA RAW_DATA;

CREATE OR REPLACE STAGE CUSTOMER_STAGE;

-- upload JSON file via Snowflake Web UI

list @CUSTOMER_STAGE;
-- customer_stage/customer_data.json

/*
Load Data from the Stage into the Raw Table
To load the raw customer data into the CUSTOMER_RAW table, 
use the COPY INTO command
*/

-- Create JSON file format
CREATE OR REPLACE FILE FORMAT JSON_FORMAT
TYPE = 'JSON';

-- Load data to the CUSTOMER_RAW table with the file format
COPY INTO CUSTOMER_RAW
FROM @customer_stage/customer_data.json
FILE_FORMAT = (FORMAT_NAME = JSON_FORMAT);

SELECT * FROM CUSTOMER_RAW;

/*
Perform JSON flattening and insert data into the flatten table
Extract the required columns from the raw table and load into the flatten table 
by flattening the JSON data. Here we need to use the LATERAL FLATTEN functionality of snowflake
*/
SELECT
data.*
FROM CUSTOMER_RAW,
LATERAL FLATTEN (input=>json_data) AS data;

SELECT
data.value,
FROM CUSTOMER_RAW,
LATERAL FLATTEN (input=>json_data) AS data;

-- testing
SELECT
data.value:category::STRING AS CATEGORY,
FROM CUSTOMER_RAW,
LATERAL FLATTEN (input=>json_data) AS data;

SELECT
data.value:customerid::INT AS CUSTOMERID,
data.value:name::STRING AS NAME,
data.value:email::STRING AS EMAIL,
data.value:region::STRING AS REGION,
data.value:country::STRING AS COUNTRY,
data.value:productname::STRING AS PRODUCTNAME,
data.value:productbrand::STRING AS PRODUCTBRAND,
data.value:category::STRING AS CATEGORY,
data.value:quantity::INT AS QUANTITY,
data.value:priceperunit::FLOAT AS PRICEPERUNIT,
data.value:totalsales::FLOAT AS TOTALSALES,
data.value:purchasemode::STRING AS PURCHASEMODE,
data.value:modeofpayment::STRING AS MODEOFPAYMENT,
data.value:purchasedate::DATE AS PURCHASEDATE
FROM CUSTOMER_RAW,
LATERAL FLATTEN (input=>json_data) AS data;

-- insert data into the CUSTOMER_FLATTEN table
INSERT INTO FLATTEN_DATA.CUSTOMER_FLATTEN
(
CUSTOMERID,
NAME,
EMAIL,
REGION,
COUNTRY,
PRODUCTNAME,
PRODUCTBRAND,
CATEGORY,
QUANTITY,
PRICEPERUNIT,
TOTALSALES,
PURCHASEMODE,
MODEOFPAYMENT,
PURCHASEDATE
)
SELECT
data.value:customerid::INT AS CUSTOMERID,
data.value:name::STRING AS NAME,
data.value:email::STRING AS EMAIL,
data.value:region::STRING AS REGION,
data.value:country::STRING AS COUNTRY,
data.value:productname::STRING AS PRODUCTNAME,
data.value:productbrand::STRING AS PRODUCTBRAND,
data.value:category::STRING AS CATEGORY,
data.value:quantity::INT AS QUANTITY,
data.value:priceperunit::FLOAT AS PRICEPERUNIT,
data.value:totalsales::FLOAT AS TOTALSALES,
data.value:purchasemode::STRING AS PURCHASEMODE,
data.value:modeofpayment::STRING AS MODEOFPAYMENT,
data.value:purchasedate::DATE AS PURCHASEDATE
FROM CUSTOMER_RAW,
LATERAL FLATTEN (input=>json_data) AS data;

USE SCHEMA FLATTEN_DATA;

SELECT * FROM CUSTOMER_FLATTEN;

/*
Data Analysis on the flatten data

1. Calculate the total sales for each region.
2. Identify the region with the highest total sales.
3. Determine the total quantity sold for each product brand.
4. Find the product with the least quantity sold.
5. Identify the customer who made the highest purchase.
6. Locate the product name and brand with the lowest unit price.
7. List the top 5 best-selling products.
8. Identify the 5 countries with the lowest sales.
*/

-- 1. Calculate the total sales for each region.

SELECT
    REGION,
    ROUND(SUM(TOTALSALES), 0) AS total_sales_per_region
FROM CUSTOMER_FLATTEN
GROUP BY REGION
ORDER BY total_sales_per_region DESC;

-- 2. Identify the region with the highest total sales.
SELECT
    REGION,
    ROUND(SUM(TOTALSALES), 0) AS total_sales_per_region
FROM CUSTOMER_FLATTEN
GROUP BY REGION
ORDER BY total_sales_per_region DESC
LIMIT 1;

-- 3. Determine the total quantity sold for each product brand.
SELECT 
    PRODUCTBRAND,
    SUM(QUANTITY) AS tot_quantity_sold_per_brand
FROM CUSTOMER_FLATTEN
GROUP BY PRODUCTBRAND
ORDER BY tot_quantity_sold_per_brand DESC;

-- 4. Find the product with the least quantity sold.
SELECT 
    PRODUCTNAME,
    SUM(QUANTITY) AS tot_quantity_sold_per_product
FROM CUSTOMER_FLATTEN
GROUP BY PRODUCTNAME
ORDER BY tot_quantity_sold_per_product
LIMIT 1;

-- 5. Identify the customer who made the highest purchase.
SELECT 
    CUSTOMERID,
    NAME,
    ROUND(SUM(TOTALSALES), 0) AS total_purchase
FROM CUSTOMER_FLATTEN
GROUP BY CUSTOMERID, NAME
ORDER BY total_purchase DESC
LIMIT 1;

-- 6. Locate the product name and brand with the lowest unit price.
SELECT
    PRODUCTNAME,
    PRODUCTBRAND,
    PRICEPERUNIT 
FROM CUSTOMER_FLATTEN
ORDER BY PRICEPERUNIT
LIMIT 1;

-- 7. List the top 5 best-selling products.

SELECT
    PRODUCTNAME,
    ROUND(SUM(TOTALSALES), 0) AS total_sales_per_product 
FROM CUSTOMER_FLATTEN
GROUP BY PRODUCTNAME
ORDER BY total_sales_per_product DESC
LIMIT 5;

-- 8. Identify the 5 countries with the lowest sales.
SELECT
    COUNTRY,
    ROUND(SUM(TOTALSALES), 0) AS total_sales_per_country
FROM CUSTOMER_FLATTEN
GROUP BY COUNTRY
ORDER BY total_sales_per_country
LIMIT 5;