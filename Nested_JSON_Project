/*
Unstructured Data - Nested JSON + Internal Stage + Copy Command 

Project Overview

In this mini project, you will:
Load sales data from a JSON file into a raw table in Snowflake using the internal stage.
Perform JSON flattening on the raw table and create a flatten table 
Perform data analysis on the flatten data

Objectives
Learn how to work with Snowflake's internal stages for file storage.
Use the COPY INTO command to load unstructured data into the Snowflake table.
Perform Nested JSON Flattening in snowflake.
Set up raw and flatten tables in Snowflake for analytics purposes.

Tools/Technologies Used
Snowflake: Cloud-based data warehouse
Snowflake Web UI: SQL execution environment
JSON File: Sample Sales data 
*/

USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

/*
Create a Database & Schema
Database : SALES_DATA
Schema : RAW_DATA
Schema : FLATTEN_DATA
*/

CREATE OR REPLACE DATABASE SALES_DATA;
CREATE OR REPLACE SCHEMA RAW_DATA;
CREATE OR REPLACE SCHEMA FLATTEN_DATA;

/*
Create Raw Table in the RAW_DATA schema

Table : 
Database: SALES_DATA
Schema: RAW_DATA
Name: SALES_RAW 
Table structure
JSON_DATA VARIANT
*/

USE SCHEMA RAW_DATA;
CREATE OR REPLACE TABLE SALES_RAW
(
json_data VARIANT
);

/*
Create flatten table in the FLATTEN_DATA schema
Table Name : 
Database: SALES_DATA
Schema: FLATTEN_DATA
Name: SALES_FLATTEN 

Table structure
COMPANIES STRING
SALES_PERIOD STRING
TOTAL_REVENUE FLOAT
TOTAL_UNITS_SOLD FLOAT
REGIONS STRING
TOTAL_SALES FLOAT
PRODUCTS STRING
UNITS_SOLD FLOAT
REVENUE FLOAT
*/

USE SCHEMA FLATTEN_DATA;
CREATE OR REPLACE TABLE SALES_FLATTEN
(
COMPANIES STRING,
SALES_PERIOD STRING,
TOTAL_REVENUE FLOAT,
TOTAL_UNITS_SOLD FLOAT,
REGIONS STRING,
TOTAL_SALES FLOAT,
PRODUCTS STRING,
UNITS_SOLD FLOAT,
REVENUE FLOAT
);

/*
Upload the JSON File to an Internal Stage

Create an Internal Stage in the RAW_DATA schema
Database: SALES_DATA
Schema: RAW_DATA

Name: SALES_STAGE
Upload the sales json data file in the internal stage
List the file in the internal stage
*/

USE SCHEMA RAW_DATA; 
CREATE OR REPLACE STAGE SALES_STAGE;

-- upload JSON file via Snowflake Web UI

list @SALES_STAGE;
-- sales_stage/sales_data.json

/*
Load Data from the Stage into the Raw Table

To load the raw sales data into the SALES_RAW table, use the COPY INTO command
*/

-- Create JSON file format
CREATE OR REPLACE FILE FORMAT JSON_FORMAT
TYPE = 'JSON';

-- Load data to the CUSTOMER_RAW table with the file format
COPY INTO SALES_RAW
FROM @sales_stage/sales_data.json
FILE_FORMAT = (FORMAT_NAME = JSON_FORMAT);

SELECT * FROM RAW_DATA.SALES_RAW;

/*
Perform JSON flattening and insert data into the flatten table

Extract the required columns from the raw table and load into the flatten table 
by flattening the JSON data. Here we need to use the LATERAL FLATTEN functionality of snowflake
*/

SELECT
companies.*
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies;

SELECT
companies.key::STRING AS COMPANIES,
companies.value,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies;

SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
companies.value:regions,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies;

SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.*,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions;

SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.key::STRING AS REGIONS,
json_data:total_sales::FLOAT AS TOTAL_SALES,
regions.value:products,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions;

SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.key::STRING AS REGIONS,
json_data:total_sales::FLOAT AS TOTAL_SALES,
products.*,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions,
LATERAL FLATTEN (input=>regions.value:products) AS products;

SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.key::STRING AS REGIONS,
json_data:total_sales::FLOAT AS TOTAL_SALES,
products.key::STRING AS PRODUCTS,
products.value,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions,
LATERAL FLATTEN (input=>regions.value:products) AS products;


SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.key::STRING AS REGIONS,
json_data:total_sales::FLOAT AS TOTAL_SALES,
products.key::STRING AS PRODUCTS,
products.value:units_sold::FLOAT AS UNITS_SOLD,
products.value:revenue::FLOAT AS REVENUE,
FROM SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions,
LATERAL FLATTEN (input=>regions.value:products) AS products;


// insert data into the flatten table
USE SCHEMA FLATTEN_DATA;
INSERT INTO SALES_FLATTEN
(
COMPANIES,
SALES_PERIOD,
TOTAL_REVENUE,
TOTAL_UNITS_SOLD,
REGIONS,
TOTAL_SALES,
PRODUCTS,
UNITS_SOLD,
REVENUE
)
SELECT
companies.key::STRING AS COMPANIES,
companies.value:sales_period::STRING AS SALES_PERIOD,
companies.value:total_revenue::FLOAT AS TOTAL_REVENUE,
companies.value:total_units_sold::FLOAT AS TOTAL_UNITS_SOLD,
regions.key::STRING AS REGIONS,
json_data:total_sales::FLOAT AS TOTAL_SALES,
products.key::STRING AS PRODUCTS,
products.value:units_sold::FLOAT AS UNITS_SOLD,
products.value:revenue::FLOAT AS REVENUE,
FROM RAW_DATA.SALES_RAW,
LATERAL FLATTEN (input=>json_data:companies) AS companies,
LATERAL FLATTEN (input=>companies.value:regions) AS regions,
LATERAL FLATTEN (input=>regions.value:products) AS products;

SELECT * FROM SALES_FLATTEN;

/*
Data Analysis on the flatten data

1. Calculate the revenue for each company.
2. Determine the top 3 companies with the highest revenue.
3. Identify the 2 regions with the lowest number of units sold.
4. Identify the product with the highest revenue generated from sales.
5. Find the product with the fewest units sold.
6. Determine the region with the highest number of laptop units sold
7. Identify the bottom 3 companies and regions with the lowest revenue generated from smartphone sales.
*/

-- 1. Calculate the revenue for each company.

SELECT
    COMPANIES,
    SUM(TOTAL_REVENUE) AS company_revenue
FROM SALES_FLATTEN
GROUP BY COMPANIES
ORDER BY company_revenue DESC;

-- 2. Determine the top 3 companies with the highest revenue.
SELECT
    COMPANIES,
    SUM(TOTAL_REVENUE) AS company_revenue
FROM SALES_FLATTEN
GROUP BY COMPANIES
ORDER BY company_revenue DESC
LIMIT 3;

-- 3. Identify the 2 regions with the lowest number of units sold.
SELECT
    REGIONS,
    SUM(UNITS_SOLD) AS total_units_sold_per_region
FROM SALES_FLATTEN
GROUP BY REGIONS
ORDER BY total_units_sold_per_region
LIMIT 2;

-- 4. Identify the product with the highest revenue generated from sales.
SELECT
    PRODUCTS,
    SUM(REVENUE) AS product_revenue
FROM SALES_FLATTEN
GROUP BY PRODUCTS
ORDER BY product_revenue DESC
LIMIT 1;

-- 5. Find the product with the fewest units sold.
SELECT
    PRODUCTS,
    SUM(UNITS_SOLD) AS product_count
FROM SALES_FLATTEN
GROUP BY PRODUCTS
ORDER BY product_count
LIMIT 1;

-- 6. Determine the region with the highest number of laptop units sold
SELECT
    REGIONS,
    PRODUCTS,
    SUM(UNITS_SOLD) AS product_count
FROM SALES_FLATTEN
GROUP BY REGIONS, PRODUCTS
HAVING PRODUCTS ='laptop'
ORDER BY product_count DESC
LIMIT 1;

-- 7. Identify the bottom 3 companies and regions with the lowest revenue generated from smartphone sales.
SELECT
    COMPANIES,
    REGIONS,
    SUM(REVENUE) AS tot_revenue
FROM SALES_FLATTEN
WHERE PRODUCTS ='smartphone'
GROUP BY COMPANIES, REGIONS
ORDER BY tot_revenue
LIMIT 10;