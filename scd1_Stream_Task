/*
SCD1 Using Snowflake Stream and Task

Project Overview
In this mini project, you will:

Learn how we can ingest the data from an internal stage to a table in Snowflake
Capture incremental data using a stream
Perform SCD1 logic using Snowflake Task automatically

Objectives
Learn how to work with Snowflake's internal stages for file storage.
Use the COPY INTO to load structured data into the Snowflake table.
Set up a Snowflake stream to capture the incremental data
Create a Snowflake task to automate the SCD1 logic using a merge statement

Tools/Technologies Used
Snowflake: Cloud-based data warehouse
Snowflake Web UI: SQL execution environment
*/

USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;

/*
Create a Database & Schema

Database: PRODUCT_DB
Schema: PRODUCT_DATA
*/

CREATE OR REPLACE DATABASE PRODUCT_DB;
CREATE OR REPLACE SCHEMA PRODUCT_DATA;

/*
Create PRODUCT_SRC Table in the PRODUCT_DATA schema

Table : 
Database: PRODUCT_DB
Schema: PRODUCT_DATA
Name: PRODUCT_SRC

Table structure
PRODUCTID STRING
PRODUCTNAME STRING
CATEGORY STRING
PRICE FLOAT
STOCKQUANTITY FLOAT
SUPPLIER STRING
RATING FLOAT
*/

CREATE OR REPLACE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
(
PRODUCTID STRING,
PRODUCTNAME STRING,
CATEGORY STRING,
PRICE FLOAT,
STOCKQUANTITY FLOAT,
SUPPLIER STRING,
RATING FLOAT
);

/*
Create the PRODUCT_TGT table within the PRODUCT_DATA schema.

Table : 
Database: PRODUCT_DB
Schema: PRODUCT_DATA
Name: PRODUCT_TGT

Table structure
PRODUCTID STRING
PRODUCTNAME STRING
CATEGORY STRING
PRICE FLOAT
STOCKQUANTITY FLOAT
SUPPLIER STRING
RATING FLOAT
*/

CREATE OR REPLACE TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT
(
PRODUCTID STRING,
PRODUCTNAME STRING,
CATEGORY STRING,
PRICE FLOAT,
STOCKQUANTITY FLOAT,
SUPPLIER STRING,
RATING FLOAT
);

/*
Create a stream named PRODUCT_STREAM on the PRODUCT_SRC table to track incremental changes in the data

Stream: 
Database: PRODUCT_DB
Schema: PRODUCT_DATA
Name: PRODUCT_STREAM 
*/

CREATE OR REPLACE STREAM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM ON TABLE PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC; 

/*
Create a task named PRODUCT_TASK that runs a MERGE statement every 
1 minute to implement Slowly Changing Dimension Type 1 (SCD1) logic. 

Task: 
Database: PRODUCT_DB
Schema: PRODUCT_DATA
Name: PRODUCT_TASK 

Merge Logic:
Primary Key:  PRODUCTID
Source Table: PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM
Target Table: PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT 
*/

-- Insert data into target table, PRODUCT_TGT, through task
CREATE OR REPLACE TASK PRODUCT_DB.PRODUCT_DATA.PRODUCT_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE'
-- This line says: "Only run the task if there is new data in the stream (like a change detector)."

WHEN
    SYSTEM$STREAM_HAS_DATA('PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM')
-- Now the real work begins. We start the task with this command.

AS
-- We are merging (updating or adding) data into the target table called PRODUCT_TGT.

MERGE INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT AS TGT

-- We use the stream (PRODUCT_STREAM) as the source of the new or changed data.
USING (
    SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM
) AS SRC

-- We match rows where the PRODUCTID (like a product's unique ID) is the same in both the source and the target.
ON TGT.PRODUCTID = SRC.PRODUCTID

-- If there’s a match (the product already exists), we update the product's info (name, price, etc.) in the target table.
WHEN MATCHED THEN UPDATE SET
    TGT.PRODUCTNAME = SRC.PRODUCTNAME,
    TGT.CATEGORY = SRC.CATEGORY,
    TGT.PRICE = SRC.PRICE,
    TGT.STOCKQUANTITY = SRC.STOCKQUANTITY,
    TGT.SUPPLIER = SRC.SUPPLIER,
    TGT.RATING = SRC.RATING
    
-- If there’s no match (a new product), we insert it into the target table.
WHEN NOT MATCHED THEN INSERT 
(
    PRODUCTID,
    PRODUCTNAME,
    CATEGORY,
    PRICE,
    STOCKQUANTITY,
    SUPPLIER,
    RATING
) 
VALUES 
(
    SRC.PRODUCTID,
    SRC.PRODUCTNAME,
    SRC.CATEGORY,
    SRC.PRICE,
    SRC.STOCKQUANTITY,
    SRC.SUPPLIER,
    SRC.RATING
);

/*
Create an Internal Stage
 
Database: PRODUCT_DB  
Schema: PRODUCT_DATA
Name: PRODUCT_STAGE 
*/

-- Create an internal stage
CREATE OR REPLACE STAGE PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE;

/*
Upload the product_fulldata.csv file to the Internal Stage
Upload the product_fulldata.csv data file in the internal stage PRODUCT_STAGE
List the file in the internal stage
*/

-- Access the internal stage
list @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE;

/*
Load product_fulldata.csv Data from the Stage into the PRODUCT_SRC Table
To load the product_fulldata.csv  into the PRODUCT_SRC table, use the COPY INTO command
*/

COPY INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
FROM @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE
file_format = (TYPE = 'CSV' SKIP_HEADER = 1);

SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC;

/*
Verify that the product_fulldata.csv file is automatically loaded into the 
PRODUCT_TGT table using the configured stream and task after 1 min
*/

SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT;

/*
If nothing appears in PRODUCT_TGT, check these:

1. Is the stream working?
2. Is the task running?
*/

-- 1. Is the stream working?
-- This will show the changes the stream has detected.
SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_STREAM;

-- 2. Is the task running?
SHOW TASKS IN SCHEMA PRODUCT_DB.PRODUCT_DATA;

-- Check the state column. If it says SUSPENDED, resume it:

ALTER TASK PRODUCT_DB.PRODUCT_DATA.PRODUCT_TASK RESUME;

/*
Upload the product_changedata.csv file to the Internal Stage
Upload the product_changedata.csv data file in the internal stage PRODUCT_STAGE
List the file in the internal stage
*/

-- Access the internal stage
list @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE;
-- product_stage/product_changedata.csv

/*
Load product_changedata.csv Data from the Stage into the PRODUCT_SRC Table
To load the product_changedata.csv  into the PRODUCT_SRC table, use the COPY INTO command
*/

COPY INTO PRODUCT_DB.PRODUCT_DATA.PRODUCT_SRC
FROM @PRODUCT_DB.PRODUCT_DATA.PRODUCT_STAGE
file_format = (TYPE = 'CSV' SKIP_HEADER = 1);

/*
Confirm that the product_changedata.csv file is automatically loaded into the PRODUCT_TGT table 
using the configured stream and task, and verify the implementation of SCD1 logic after 1 min
*/

SELECT * FROM PRODUCT_DB.PRODUCT_DATA.PRODUCT_TGT;
